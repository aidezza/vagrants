# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = '2'
Vagrant.require_version '>= 1.8.2'

host  = RbConfig::CONFIG['host_os']
hosts = {
    #10.10.10.1 is configured as bridged between the host and 10.10.1.x guests
    #keep in sync with deploy/development.hosts
    "react-native.example.com"  => "10.10.10.10",
}

#execute local commands (host)
module LocalCommand
    class Config < Vagrant.plugin("2", :config)
        attr_accessor :command
    end
    class Plugin < Vagrant.plugin("2")
        name "local_shell"
        config(:local_shell, :provisioner) do
            Config
        end
        provisioner(:local_shell) do
            Provisioner
        end
    end
    class Provisioner < Vagrant.plugin("2", :provisioner)
        def provision
            result = system "#{config.command}"
        end
    end
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    hosts.each do |name, ip|
        config.vm.define name do |machine|
            machine.vm.box = "ubuntu/trusty64"
            machine.vm.hostname = name
            machine.vm.network :private_network, ip: ip

            #enable remote debugging
            machine.vm.network "forwarded_port", guest: 8081, host: 8081 #chrome powered debugging
            machine.vm.network "forwarded_port", guest: 5037, host: 5037 #adb

            #use rsync instead of vboxfs to keep files on the guest continually
            #updated, required for live reload to work correctly
            #https://www.virtualbox.org/ticket/10660?cversion=0&cnum_hist=1
            machine.vm.synced_folder ".", "/vagrant", type: "rsync",
                rsync__exclude: ".git/",
                rsync__args: ["--verbose", "--archive", "-z", "--copy-links"]

            #enable X11 forwarding for chrome powered debugging
            machine.ssh.forward_agent = true
            machine.ssh.forward_x11   = true

            machine.vm.provider "virtualbox" do |vbox|
                vbox.name = name
                vbox.linked_clone = true if Vagrant::VERSION =~ /^1.8/
                if vbox.name.match(/^react/)
                    vbox.customize ["modifyvm", :id, "--memory", 2048]
                    if host =~ /darwin/
                        cpus = `sysctl -n hw.ncpu`.to_i
                    elsif host =~ /linux/
                        cpus = `nproc`.to_i
                    else #windows?
                        cpus = `wmic cpu get NumberOfCores`.split("\n")[2].to_i
                    end
                    #vbox.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]
                    vbox.customize ["modifyvm", :id, "--cpus", cpus]
                    #enable USB
                    vbox.customize ["modifyvm", :id, "--usb", "on"]
                    vbox.customize ['usbfilter', 'add', '0', '--target', :id, '--name', '1197123b', '--vendorid', '0x04e8']
                    vbox.customize ['usbfilter', 'add', '0', '--target', :id, '--name', 'android', '--vendorid', '0x18d1']
                #elsif vbox.name == "foo"
                    #vbox.customize ["modifyvm", :id, "--memory", 256]           #MB
                    #vbox.customize ["modifyvm", :id, "--cpuexecutioncap", "50"] #%
                    #vbox.customize ["modifyvm", :id, "--cpus", "2"]
                else
                    vbox.customize ["modifyvm", :id, "--memory", 256]            #MB
                    vbox.customize ["modifyvm", :id, "--cpuexecutioncap", "50"]  #%
                    vbox.customize ["modifyvm", :id, "--cpus", "2"]
                end
            end

            #$ vagrant plugin install vagrant-hosts
            if Vagrant.has_plugin?('vagrant-hosts')
                machine.vm.provision :hosts, sync_hosts: true
            elsif Vagrant.has_plugin?('vagrant-hostmanager')
                machine.hostmanager.enabled     = true
                machine.hostmanager.manage_host = true
                machine.hostmanager.aliases     = aliases
            end

            #authorize default public ssh key
            machine.vm.provision 'shell', inline: "mkdir -p /root/.ssh/"
            machine.vm.provision 'shell', inline: "mkdir -p /home/vagrant/.ssh/", privileged: false
            if File.file?("#{Dir.home}/.ssh/id_rsa.pub")
                ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
                machine.vm.provision 'shell', inline: "printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys"
                machine.vm.provision 'shell', inline: "printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys", privileged: false
            end

            #copy private ssh key
            if File.file?("#{Dir.home}/.ssh/id_rsa")
                machine.vm.provision "file",  source: "~/.ssh/id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
                machine.vm.provision 'shell', inline: "chown vagrant:vagrant /home/vagrant/.ssh/id_rsa", privileged: false
                machine.vm.provision 'shell', inline: "chmod 600 /home/vagrant/.ssh/id_rsa", privileged: false
            else
                ssh_pub_key = File.readlines("ansible-local/ansible-local.pub").first.strip
                machine.vm.provision 'shell', inline: "printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys"
                machine.vm.provision 'shell', inline: "printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys", privileged: false
                machine.vm.provision "file",  source: "ansible-local/ansible-local.priv", destination: "/home/vagrant/.ssh/id_rsa"
                machine.vm.provision 'shell', inline: "chown vagrant:vagrant /home/vagrant/.ssh/id_rsa", privileged: false
                machine.vm.provision 'shell', inline: "chmod 600 /home/vagrant/.ssh/id_rsa", privileged: false
            end

            machine.vm.provision 'shell', path: "deploy/001-install-base-dependencies.sh", privileged: false
            machine.vm.provision 'shell', path: "deploy/002-install-android-sdk.sh", privileged: false
            machine.vm.provision 'shell', path: "deploy/003-install-watchman.sh", privileged: false
            machine.vm.provision 'shell', path: "deploy/004-install-react-native.sh", privileged: false
            machine.vm.provision 'shell', path: "deploy/005-workaround-know-issues.sh", privileged: false
            machine.vm.provision 'shell', path: "deploy/010-fetch-native-starter-kit-app.sh", privileged: false
            machine.vm.provision 'shell', path: "deploy/011-fetch-nativebase-kitchensink-app.sh", privileged: false
            machine.vm.provision 'shell', path: "deploy/012-fetch-pepperoni-kit-app.sh", privileged: false

            machine.vm.provision 'shell', path: "deploy/always-001-enable-gradle-daemon.sh", run: "always", privileged: false
            machine.vm.provision 'shell', path: "deploy/always-002-setup-adb-connection.sh", run: "always", privileged: false
            machine.vm.provision 'shell', path: "deploy/always-010-deploy-native-starter-kit-app-to-android.sh", run: "always", privileged: false
            #machine.vm.provision 'shell', path: "deploy/always-011-deploy-nativebase-kitchensink-app-to-android.sh", run: "always", privileged: false
            #machine.vm.provision 'shell', path: "deploy/always-012-deploy-pepperoni-kit-app-to-android.sh", run: "always", privileged: false

            if Vagrant::Util::Platform.windows? then
                machine.vm.provision "shell", inline: 'printf "%s\\n" "Now run $ vagrant rsync-auto #to enable live reload"'
            else #unix
                machine.vm.provision "shell", inline: 'printf "%s\\n" "Launching $ vagrant rsync-auto > vagrant-rsync-auto.log"'
                machine.vm.provision 'local_shell', command: "nohup vagrant rsync-auto > vagrant-rsync-auto.log 2>&1 &"
            end
        end
    end
end
