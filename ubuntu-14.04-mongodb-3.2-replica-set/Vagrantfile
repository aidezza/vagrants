# vi: set ft=ruby :
VAGRANTFILE_API_VERSION = '2'
Vagrant.require_version '>= 1.8.2'

hosts = {
    #10.10.10.1 is configured as bridged between the host and 10.10.1.x guests
    "mongodb-01.example.com" => "10.10.10.11",
    "mongodb-02.example.com" => "10.10.10.12",
    "mongodb-03.example.com" => "10.10.10.13",
}

raise "vagrant-hosts plugin must be installed: $ vagrant plugin install vagrant-hosts" unless Vagrant.has_plugin? "vagrant-hosts"
#vagrant-hosts is a hard requirement
#required_plugins = %w(vagrant-hosts)
#plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
#if not plugins_to_install.empty?
  #puts "Installing plugins: #{plugins_to_install.join(' ')}"
  #if system "vagrant plugin install #{plugins_to_install.join(' ')}"
    #exec "vagrant #{ARGV.join(' ')}"
  #else
    #abort "Installation of one or more plugins has failed. Aborting."
  #end
#end

#cross-platform way of finding an executable in the $PATH.
def which(cmd)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each do |ext|
            exe = File.join(path, "#{cmd}#{ext}")
            return exe if File.executable?(exe) && !File.directory?(exe)
        end
    end
    nil
end

host_counter = 0; Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    hosts.each do |name, ip|
        config.vm.define name do |machine|
            #machine.vm.box = "centos/7" #broken on Windows when used as vagrant host
            #workarounds:
            # => use a non official centos image with vbguest additions preinstalled
            # => install rsync on the Windows host
            # => use vagrant-vbguest plugin to install automatically vbguest into the vm
            # => sync manually the required files [currently used]
            machine.vm.box = "ubuntu/trusty64"
            machine.vm.hostname = name
            machine.vm.network :private_network, ip: ip

            machine.vm.provider "virtualbox" do |vbox|
                vbox.name = name
                if vbox.name.match(/^mongodb/)
                    vbox.customize ["modifyvm", :id, "--memory", 512]           #MB
                    vbox.customize ["modifyvm", :id, "--cpuexecutioncap", "50"] #%
                #elsif vbox.name.match(/^foo/)
                    #vbox.customize ["modifyvm", :id, "--memory", 256]           #MB
                    #vbox.customize ["modifyvm", :id, "--cpuexecutioncap", "50"] #%
                else
                    vbox.customize ["modifyvm", :id, "--memory", 256]           #MB
                    vbox.customize ["modifyvm", :id, "--cpuexecutioncap", "50"] #%
                end
            end

            #$ vagrant plugin install vagrant-hosts
            if Vagrant.has_plugin?('vagrant-hosts')
                machine.vm.provision :hosts, sync_hosts: true
            elsif Vagrant.has_plugin?('vagrant-hostmanager')
                machine.hostmanager.enabled     = true
                machine.hostmanager.manage_host = true
                machine.hostmanager.aliases     = aliases
            end

            #authorize default public ssh key
            machine.vm.provision 'shell', inline: "mkdir -p /root/.ssh/"
            machine.vm.provision 'shell', inline: "mkdir -p /home/vagrant/.ssh/", privileged: false
            if File.file?("#{Dir.home}/.ssh/id_rsa.pub")
                ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
                machine.vm.provision 'shell', inline: "printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys"
                machine.vm.provision 'shell', inline: "printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys", privileged: false
            end

            #copy private ssh key
            if File.file?("#{Dir.home}/.ssh/id_rsa")
                machine.vm.provision "file",  source: "~/.ssh/id_rsa", destination: "/home/vagrant/.ssh/id_rsa"
                machine.vm.provision 'shell', inline: "chown vagrant:vagrant /home/vagrant/.ssh/id_rsa", privileged: false
                machine.vm.provision 'shell', inline: "chmod 600 /home/vagrant/.ssh/id_rsa", privileged: false
            else
                ssh_pub_key = File.readlines("ansible-local/ansible-local.pub").first.strip
                machine.vm.provision 'shell', inline: "printf '\\n%s\\n' '#{ssh_pub_key}' >> /root/.ssh/authorized_keys"
                machine.vm.provision 'shell', inline: "printf '\\n%s\\n' '#{ssh_pub_key}' >> /home/vagrant/.ssh/authorized_keys", privileged: false
                machine.vm.provision "file",  source: "ansible-local/ansible-local.priv", destination: "/home/vagrant/.ssh/id_rsa"
                machine.vm.provision 'shell', inline: "chown vagrant:vagrant /home/vagrant/.ssh/id_rsa", privileged: false
                machine.vm.provision 'shell', inline: "chmod 600 /home/vagrant/.ssh/id_rsa", privileged: false
            end

            #copy ~/.gitconfig
            if File.file?("#{Dir.home}/.gitconfig")
                machine.vm.provision "file",  source: "~/.gitconfig", destination: "/home/vagrant/.gitconfig"
                machine.vm.provision 'shell', inline: "chown vagrant:vagrant /home/vagrant/.gitconfig", privileged: false
            end

            #only execute ansible when all hosts are ready
            host_counter = host_counter + 1
            if host_counter == hosts.length
                if which('ansible-playbook')
                    machine.vm.provision "ansible" do |ansible|
                        ansible.verbose  = "vvv"
                        ansible.playbook = "ansible.yml"
                        #ansible.galaxy_role_file = "requirements.yml"
                    end
                else
                    machine.vm.provision "ansible_local" do |ansible|
                        ansible.verbose        = "vvv"
                        ansible.playbook       = "ansible.yml"
                        ansible.inventory_path = "development.hosts"
                        ansible.limit          = "all"
                        #ansible.sudo           = true
                        #ansible.raw_arguments  = [
                             #"--connection=paramiko",
                            #"--private-key=/vagrant/.vagrant/machines/.../private_key"
                        #]
                        #ansible.galaxy_role_file = "requirements.yml"
                    end
                end
            end
        end
    end
end
